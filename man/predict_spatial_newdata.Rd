% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict_spatial.R
\name{predict_spatial_newdata}
\alias{predict_spatial_newdata}
\title{Predict on spatial objects with mlr3 learners}
\usage{
predict_spatial_newdata(learner, object, filename = NULL, overwrite = FALSE)
}
\arguments{
\item{learner}{\link[mlr3:Learner]{mlr3::Learner}\cr
Any \link[mlr3:Learner]{mlr3::Learner}.}

\item{object}{\verb{[SpatRaster, sf, RasterBrick]}}

\item{filename}{\verb{[character]}\cr
Filename of optional file to write prediction values into.
For raster-like inputs this can be a \code{.tif} file.
For {sf} objects, this could be a \code{.gpgk} or a \code{.shp} file.}

\item{overwrite}{\verb{[logical]}\cr
Should a possibly existing file on disk (referring to argument \code{filename})
be overwritten?}
}
\value{
mlr3::Prediction
}
\description{
This function allows to directly predict mlr3 learners on various spatial
objects (see section "Supported Spatial Classes"). It returns an
\link[mlr3:Prediction]{mlr3::Prediction} object and (optionally) the same object that was used for
the prediction.
}
\details{
A direct prediction on a subset of a \link[mlr3:Task]{mlr3::Task} object is not possible for
\CRANpkg{terra} objects as \CRANpkg{terra} objects contain external pointers
which are not compatible with future-based parallelization. Due to this, the
values from the \CRANpkg{terra} object need to be extracted first into a
\code{data.table}.
}
\section{Parallelization}{


For predictions which take > 10 seconds, parallelization could help speeding
things up. {mlr3} supports parallel predictions since v0.12.0. This can be
enabled by setting the \verb{$parallel_predict = TRUE} flag in the learner and
supplying a parallel future plan before executing the prediction, for example
\code{future::plan(multisession, workers = 2)}. See the examples for more
information.
}

\section{Spatial Classes support}{


Task and Prediction support for the following classes is planned:
\itemize{
\item {sf}
\item {stars}
\item {raster}
}
}

\examples{
if (mlr3misc::require_namespaces(c("terra", "future"), quietly = TRUE)) {
  stack = demo_stack_spatraster(size = 5, layers = 5)
  backend = DataBackendSpatRaster$new(stack)
  task = as_task_classif(backend, target = "y", positive = "TRUE")
  # train
  learner = lrn("classif.featureless")
  learner$train(task, row_ids = sample(1:task$nrow, 500))
  predict_spatial_newdata(learner, stack)
}
}
