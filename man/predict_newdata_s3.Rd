% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict_spatial.R
\name{predict_newdata_s3.SpatRaster}
\alias{predict_newdata_s3.SpatRaster}
\alias{predict_newdata_s3.RasterBrick}
\alias{predict_newdata_s3.sf}
\alias{predict_newdata_s3.stars}
\title{Predict on spatial objects with mlr3 learners}
\usage{
\method{predict_newdata_s3}{SpatRaster}(x, task = NULL, self = NULL, ...)

\method{predict_newdata_s3}{RasterBrick}(x, task = NULL, self = NULL, ...)

\method{predict_newdata_s3}{sf}(x, task = NULL, self = NULL, ...)

\method{predict_newdata_s3}{stars}(x, task = NULL, self = NULL, ...)
}
\arguments{
\item{x}{\verb{[SpatRaster, sf, RasterBrick]}\cr
Object to predict on which is treated as "newdata".}

\item{task}{(\link{Task}) For internal use only.}

\item{self}{(\code{any})\cr
For internal use only.}

\item{...}{Passed down to the respective predict method. See section
"Additional arguments".}
}
\value{
mlr3::Prediction
}
\description{
This function allows to directly predict mlr3 learners on various spatial
xs (see section "Supported Spatial Classes"). It returns an
\link[mlr3:Prediction]{mlr3::Prediction} x and (optionally) the same x that was used for
the prediction.
}
\section{Additional arguments}{

\itemize{
\item \code{filename} \verb{[character]}\cr
Filename of optional file to write prediction values into.
For raster-like inputs this can be a \code{.tif} file.
For {sf} xs, this could be a \code{.gpgk} or a \code{.shp} file.
\item \code{overwrite} \verb{[logical]}\cr
Should a possibly existing file on disk (referring to argument \code{filename})
be overwritten?
\item \code{quiet} \verb{[logical]}\cr
Whether to suppress possible console output when invoking the writing
methods of the respective spatial classes.
}
}

\section{Parallelization}{


For predictions which take > 10 seconds, parallelization could help speeding
things up. {mlr3} supports parallel predictions since v0.12.0. This can be
enabled by setting the \verb{$parallel_predict = TRUE} flag in the learner and
supplying a parallel future plan before executing the prediction, for example
\code{future::plan(multisession, workers = 2)}. See the examples for more
information.
}

\examples{
if (mlr3misc::require_namespaces(c("terra", "future"), quietly = TRUE)) {
  stack = demo_stack_spatraster(size = 5, layers = 5)
  backend = DataBackendSpatRaster$new(stack)
  task = as_task_classif(backend, target = "y", positive = "TRUE")
  # train
  learner = lrn("classif.featureless")
  learner$train(task, row_ids = sample(1:task$nrow, 500))
  learner$predict_newdata(stack)
}
}
