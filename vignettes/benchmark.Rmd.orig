---
title: "Benchmarking parallel predictions"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Benchmarking parallel predictions}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  options(width = 120)
)
```

For the speed comparison, we are using a somewhat larger `SpatRaster` object to actually showcase some differences.

```{r benchmark}
library(mlr3)
library(mlr3learners)
library(mlr3spatial)
library(future)
library(bench)

# SpatRaster demo stack
stack = demo_stack_spatraster(size = 500, layers = 5)
backend = DataBackendSpatRaster$new(stack)
task = as_task_classif(backend, target = "y", positive = "TRUE")

# RasterBrick demo stack
stack_rasterbrick = demo_stack_rasterbrick(size = 500, layers = 5)
backend_raster = DataBackendRasterBrick$new(stack_rasterbrick, response = "y", response_is_factor = TRUE)
task_rasterbrick = as_task_classif(backend_raster, target = "y", positive = "1")

# SpatRaster learner
learner_svm = lrn("classif.svm")
learner_svm$parallel_predict = TRUE
set.seed(42)
row_ids = sample(1:task$nrow, 500)
learner_svm$train(task, row_ids = row_ids)

# RasterBrick learner
learner_svm_rasterbrick = lrn("classif.svm")
learner_svm_rasterbrick$parallel_predict = TRUE
set.seed(42)
row_ids = sample(1:task_rasterbrick$nrow, 500)
learner_svm_rasterbrick$train(task_rasterbrick, row_ids = row_ids)

bm = bench::mark(
  "mlr3-sequential-terra" = {
    plan(multisession, workers = 1)
    predict_spatial_newdata(learner_svm, stack)
  },

  "mlr3-sequential-raster" = {
    plan(multisession, workers = 1)
    predict_spatial_newdata(learner_svm_rasterbrick, stack_rasterbrick)
  },

  "terra-sequential" = terra::predict(task$backend$stack, learner_svm$model, cores = 1, cpkgs = "e1071"),
  "raster-sequential" = raster::predict(task_rasterbrick$backend$stack, learner_svm_rasterbrick$model),

  "mlr3-terra-4-cores" = {
    plan(multisession, workers = 4)
    predict_spatial_newdata(learner_svm, stack)
  },

  "mlr3-raster-4-cores" = {
    plan(multisession, workers = 4)
    predict_spatial_newdata(learner_svm_rasterbrick, stack_rasterbrick)
  },

  "terra-4-cores" = terra::predict(task$backend$stack, learner_svm$model, cores = 4, cpkgs = "e1071"),

#  "raster-4-cores" = {
#    raster::beginCluster(4, type = "PSOCK")
#
#    raster::clusterR(task_rasterbrick$backend$stack, raster::predict, args=list(model=learner_svm_rasterbrick$model))
#  },

  check = FALSE, filter_gc = FALSE, min_iterations = 3, memory = FALSE)

bm$mem_alloc = NULL
bm$`itr/sec` = NULL
bm$result = NULL
bm$`gc/sec` = NULL
bm$memory = NULL

print(bm)
```

```{r plot-benchmark, fig.cap="Benchmark plot"}
library(ggplot2)
autoplot(bm, "ridge")
```
