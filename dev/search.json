[{"path":"https://mlr3spatial.mlr-org.com/dev/articles/benchmark.html","id":"megabyte-raster-in-memory-with-mlr3","dir":"Articles","previous_headings":"","what":"10 Megabyte Raster in Memory with mlr3","title":"Benchmark Parallel Predictions","text":"Train learner task. Predict. Benchmark","code":"stack = generate_stack(list(   numeric_layer(\"x_1\"),   factor_layer(\"y\", levels = c(\"a\", \"b\"))), layer_size = 10) vector = sample_stack(stack, n = 100) task_train = as_task_classif(vector, id = \"test_vector\", target = \"y\") learner = lrn(\"classif.ranger\", num.threads = 1) learner$train(task_train) stack$y = NULL task_predict = as_task_classif(stack, id = \"test\") learner$parallel_predict = TRUE bm = bench::mark(    \"01-mlr3-1-cores\" = {     plan(sequential)     pred = predict_spatial(task_predict, learner, chunksize = 10L)   },    \"02-mlr3-2-cores\" = {     plan(multicore, workers = 2)     pred = predict_spatial(task_predict, learner, chunksize = 10L)   },    \"03-mlr3-4-core\" = {     plan(multicore, workers = 4)     pred = predict_spatial(task_predict, learner, chunksize = 10L)   },    check = FALSE, filter_gc = FALSE, min_iterations = 3,   max_iterations = 3, memory = FALSE) #> Predicting.. Progress: 89%. Estimated remaining time: 3 seconds. #> Aggregating predictions.. Progress: 38%. Estimated remaining time: 49 seconds. #> Aggregating predictions.. Progress: 76%. Estimated remaining time: 19 seconds. #> Predicting.. Progress: 90%. Estimated remaining time: 3 seconds. #> Aggregating predictions.. Progress: 38%. Estimated remaining time: 50 seconds. #> Aggregating predictions.. Progress: 76%. Estimated remaining time: 19 seconds. #> Predicting.. Progress: 89%. Estimated remaining time: 3 seconds. #> Aggregating predictions.. Progress: 37%. Estimated remaining time: 52 seconds. #> Aggregating predictions.. Progress: 74%. Estimated remaining time: 21 seconds. #> Aggregating predictions.. Progress: 55%. Estimated remaining time: 25 seconds. #> Aggregating predictions.. Progress: 67%. Estimated remaining time: 15 seconds. #> Aggregating predictions.. Progress: 60%. Estimated remaining time: 20 seconds. #> Aggregating predictions.. Progress: 65%. Estimated remaining time: 16 seconds. #> Aggregating predictions.. Progress: 64%. Estimated remaining time: 17 seconds. #> Aggregating predictions.. Progress: 60%. Estimated remaining time: 20 seconds. #> Aggregating predictions.. Progress: 58%. Estimated remaining time: 22 seconds. #> Aggregating predictions.. Progress: 53%. Estimated remaining time: 27 seconds. #> Aggregating predictions.. Progress: 56%. Estimated remaining time: 24 seconds. #> Aggregating predictions.. Progress: 56%. Estimated remaining time: 24 seconds. #> Aggregating predictions.. Progress: 51%. Estimated remaining time: 29 seconds. #> Aggregating predictions.. Progress: 53%. Estimated remaining time: 27 seconds. #> Aggregating predictions.. Progress: 52%. Estimated remaining time: 28 seconds. #> Aggregating predictions.. Progress: 65%. Estimated remaining time: 16 seconds. #> Aggregating predictions.. Progress: 50%. Estimated remaining time: 30 seconds. #> Aggregating predictions.. Progress: 98%. Estimated remaining time: 1 seconds. #> Aggregating predictions.. Progress: 50%. Estimated remaining time: 31 seconds. #> Aggregating predictions.. Progress: 98%. Estimated remaining time: 1 seconds. #> Aggregating predictions.. Progress: 48%. Estimated remaining time: 33 seconds. #> Aggregating predictions.. Progress: 98%. Estimated remaining time: 1 seconds. #> Aggregating predictions.. Progress: 48%. Estimated remaining time: 33 seconds. #> Aggregating predictions.. Progress: 98%. Estimated remaining time: 1 seconds.  saveRDS(bm, \"bm_1.rda\")"},{"path":"https://mlr3spatial.mlr-org.com/dev/articles/mlr3spatial.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting started","text":"{mlr3spatial} adds [mlr3::DataBackend]s spatial classes ([terra::SpatRaster], [raster::brick], [stars::stars]). package capable making predictions objects classes via predict_raster(). return spatial object class specified argument format. Essentially, {mlr3spatial} takes burden converting spatial objects plain data.table coercing predicted values back spatial object making sure loose spatial reference. goodies bag though: Thanks mlr3’s ability predict parallel learner, {mlr3spatial} predictions can also make use future-based parallelization speed predictions spatial objects. Often enough, spatial predictions quite large (millions values) efficient parallelization can save time . See vignette “Benchmarking parallel predictions” details. predict_raster() can executed chunks (argument chunksize), making possible execute predictions large raster files consumer grade machines. chunked execution comes overhead compared execution one block since prediction heuristic executed multiple times results need merged end. following, showcase step--step example handle multi-layer raster object package {stars}.","code":""},{"path":[]},{"path":"https://mlr3spatial.mlr-org.com/dev/articles/mlr3spatial.html","id":"data-preparation","dir":"Articles","previous_headings":"Use Case - Landsat7 data as {stars} object","what":"Data Preparation","title":"Getting started","text":"First, TIFF files read via stars::read_stars() put DataBackendRaster. DataBackend used create regression task response band1. large raster files millions values helps predict parallel. enable , set learner$parallel_predict = TRUE initiate parallel plan via {future}. Since example, parallelization enabled . use simple regression tree example learner. practice might want use different learner - can find overview available learners .","code":"library(\"mlr3\") library(\"mlr3spatial\") tif = system.file(\"tif/L7_ETMs.tif\", package = \"stars\") stack = stars::read_stars(tif)  backend = as_data_backend(stack) task = as_task_regr(backend, target = \"band1\")  print(task) #> <TaskRegr:backend> (122848 x 6) #> * Target: band1 #> * Properties: - #> * Features (5): #>   - dbl (5): band2, band3, band4, band5, band6 learner = lrn(\"regr.rpart\") set.seed(42) row_ids = sample(1:task$nrow, 500) learner$train(task, row_ids = row_ids)  print(learner) #> <LearnerRegrRpart:regr.rpart>: Regression Tree #> * Model: rpart #> * Parameters: xval=0 #> * Packages: mlr3, rpart #> * Predict Type: response #> * Feature types: logical, integer, numeric, factor, ordered #> * Properties: importance, missings, selected_features, weights"},{"path":"https://mlr3spatial.mlr-org.com/dev/articles/mlr3spatial.html","id":"prediction","dir":"Articles","previous_headings":"Use Case - Landsat7 data as {stars} object","what":"Prediction","title":"Getting started","text":"prediction predict_spatial() used. return raster file contains predictions. Users can select R spatial format returned raster . following, compare way conduct prediction using {mlr3spatial} “native” way fitting e1071::svm() model predicting terra::predict().","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/articles/mlr3spatial.html","id":"mlr3spatial","dir":"Articles","previous_headings":"Use Case - Landsat7 data as {stars} object > Prediction","what":"mlr3spatial","title":"Getting started","text":"","code":"ras = predict_spatial(task, learner, format = \"stars\") names(ras) = \"cadmium\"  print(ras) #> stars object with 2 dimensions and 1 attribute #> attribute(s): #>             Min.  1st Qu.   Median     Mean 3rd Qu.     Max. #> cadmium  62.3629 70.30233 77.01695 79.05135 89.2809 118.1429 #> dimension(s): #>   from  to  offset delta                     refsys point values x/y #> x    1 349  288776  28.5 SIRGAS 2000 / UTM zone 25S FALSE   NULL [x] #> y    1 352 9120761 -28.5 SIRGAS 2000 / UTM zone 25S FALSE   NULL [y]"},{"path":"https://mlr3spatial.mlr-org.com/dev/articles/mlr3spatial.html","id":"stars","dir":"Articles","previous_headings":"Use Case - Landsat7 data as {stars} object > Prediction","what":"stars","title":"Getting started","text":"Since layers merged {stars} object, one first need split convert regular data.table. Next, column names need adjusted match ones training data. Afterwards, data.frame generic predict() can called. Finally, predictions need injected stars object . (steps happening internally {mlr3spatial}).","code":"rpart_learner = rpart::rpart(band1 ~ ., data = task$data(rows = row_ids)) stars_stack = as.data.table(split(stack, \"band\")) stars_stack[, c(\"x\", \"y\", \"X1\")] = NULL colnames(stars_stack) = task$feature_names  stars_pred = predict(rpart_learner, stars_stack)  # subset stars object to one band only stars_pred_ras = stack[, , , 1] # rename the layer name names(stars_pred_ras) = \"pred\" # assign predictions stars_pred_ras$pred = stars_pred  print(stars_pred_ras) #> stars object with 3 dimensions and 1 attribute #> attribute(s): #>          Min.  1st Qu.   Median     Mean 3rd Qu.     Max. #> pred  62.3629 70.30233 77.01695 79.05135 89.2809 118.1429 #> dimension(s): #>      from  to  offset delta                     refsys point values x/y #> x       1 349  288776  28.5 SIRGAS 2000 / UTM zone 25S FALSE   NULL [x] #> y       1 352 9120761 -28.5 SIRGAS 2000 / UTM zone 25S FALSE   NULL [y] #> band    1   1      NA    NA                         NA    NA   NULL"},{"path":"https://mlr3spatial.mlr-org.com/dev/articles/mlr3spatial.html","id":"output-consistency","dir":"Articles","previous_headings":"Use Case - Landsat7 data as {stars} object","what":"Output consistency","title":"Getting started","text":"Now executed two predictions, like verify actually identical.","code":"all.equal(as.numeric(stars_pred_ras$pred), as.numeric(ras$cadmium)) #> [1] TRUE"},{"path":"https://mlr3spatial.mlr-org.com/dev/articles/mlr3spatial.html","id":"visualization","dir":"Articles","previous_headings":"Use Case - Landsat7 data as {stars} object","what":"Visualization","title":"Getting started","text":"Finally can plot predictions. color vector extract viridis color palette via dput(viridis::viridis_pal()(5)).","code":"plot(ras, col = c(\"#440154FF\", \"#443A83FF\", \"#31688EFF\", \"#21908CFF\", \"#35B779FF\", \"#8FD744FF\", \"#FDE725FF\"))"},{"path":"https://mlr3spatial.mlr-org.com/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marc Becker. Author, maintainer. Patrick Schratz. Author.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Becker M, Schratz P (2022). mlr3spatial: Support Spatial Objects Within 'mlr3' Ecosystem. https://mlr3spatial.mlr-org.com, https://github.com/mlr-org/mlr3spatial.","code":"@Manual{,   title = {mlr3spatial: Support for Spatial Objects Within the 'mlr3' Ecosystem},   author = {Marc Becker and Patrick Schratz},   year = {2022},   note = {https://mlr3spatial.mlr-org.com, https://github.com/mlr-org/mlr3spatial}, }"},{"path":[]},{"path":"https://mlr3spatial.mlr-org.com/dev/index.html","id":"package-scope","dir":"","previous_headings":"","what":"Package scope","title":"Support for Spatial Objects Within the mlr3 Ecosystem","text":"handling (large) spatial objects ({terra}, {raster}, {stars}, {sf} ML error-prone time consuming task. Users often need extract “raw” values spatial objects (detaching spatial metadata), train model, predict recreate spatial object . addition, predictions large raster files (.e. multiple GB size) often leads memory issues consumer grade machines. {mlr3spatial} tries help Providing DataBackendRaster class {mlr3} able handle various spatial raster classes ({terra}, {raster}, {stars}) Providing DataBackendVector class {mlr3} able handle {sf} objects Support enhanced predictions spatial objects ({terra}, {raster}, {stars}, {sf}, optional parallelization memory awareness","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/index.html","id":"spatiotemporal-resampling--cross-validation","dir":"","previous_headings":"","what":"Spatiotemporal resampling / cross-validation","title":"Support for Spatial Objects Within the mlr3 Ecosystem","text":"spatiotemporal resampling within mlr3 see {mlr3spatiotempcv}.","code":""},{"path":[]},{"path":"https://mlr3spatial.mlr-org.com/dev/index.html","id":"articles","dir":"","previous_headings":"","what":"Articles","title":"Support for Spatial Objects Within the mlr3 Ecosystem","text":"Getting Started Benchmarking parallel predictions","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendRaster.html","id":null,"dir":"Reference","previous_headings":"","what":"DataBackend for raster objects — DataBackendRaster","title":"DataBackend for raster objects — DataBackendRaster","text":"mlr3::DataBackend terra::SpatRaster raster objects. DataBackend can constructed using spatial objects listed . Internally terra used processing operations.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendRaster.html","id":"read-mode","dir":"Reference","previous_headings":"","what":"Read mode","title":"DataBackend for raster objects — DataBackendRaster","text":"two different ways reading values performed internally: \"Block mode\" reads complete rows raster file subsets requested cells. mode faster \"cell mode\" complete raster file iterated . \"Cell mode\" reads individual cells. faster \"block mode\" cells sampled. \"Block mode\" activated $data(rows) used increasing integer sequence e.g. 200:300. single cell requested, \"cell mode\" used.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendRaster.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"DataBackend for raster objects — DataBackendRaster","text":"mlr3::DataBackend -> DataBackendRaster","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendRaster.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"DataBackend for raster objects — DataBackendRaster","text":"rownames (integer()) Returns vector distinct row identifiers, .e. contents primary key column. colnames (character()) Returns vector column names. nrow (integer(1)) Number rows (observations). ncol (integer(1)) Number columns (variables). stack (SpatRaster) Raster stack.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendRaster.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"DataBackend for raster objects — DataBackendRaster","text":"mlr3::DataBackend$format() mlr3::DataBackend$print()","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendRaster.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"DataBackend for raster objects — DataBackendRaster","text":"DataBackendRaster$new() DataBackendRaster$data() DataBackendRaster$head() DataBackendRaster$distinct() DataBackendRaster$missings()","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendRaster.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"DataBackend for raster objects — DataBackendRaster","text":"Creates backend raster objects.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendRaster.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DataBackend for raster objects — DataBackendRaster","text":"","code":"DataBackendRaster$new(data)"},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendRaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataBackend for raster objects — DataBackendRaster","text":"data (terra::SpatRaster) input terra::SpatRaster.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendRaster.html","id":"method-data-","dir":"Reference","previous_headings":"","what":"Method data()","title":"DataBackend for raster objects — DataBackendRaster","text":"Returns slice raster specified format. Currently, supported formats \"data.table\". rows must addressed vector cells indices, columns must referred via layer names. Queries rows matching row id queries columns matching column name silently ignored. Rows guaranteed returned order rows, columns may returned arbitrary order. Duplicated row ids result duplicated rows, duplicated column names lead exception.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendRaster.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"DataBackend for raster objects — DataBackendRaster","text":"","code":"DataBackendRaster$data(rows, cols, data_format = \"data.table\")"},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendRaster.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataBackend for raster objects — DataBackendRaster","text":"rows integer() Row indices. Row indices start 1 upper left corner raster, increase left right top bottom. last cell bottom right corner row index equals number cells raster. cols character() Column names. data_format (character(1)) Desired data format. Currently \"data.table\" supported.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendRaster.html","id":"method-head-","dir":"Reference","previous_headings":"","what":"Method head()","title":"DataBackend for raster objects — DataBackendRaster","text":"Retrieve first n rows.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendRaster.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"DataBackend for raster objects — DataBackendRaster","text":"","code":"DataBackendRaster$head(n = 6L)"},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendRaster.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataBackend for raster objects — DataBackendRaster","text":"n (integer(1)) Number rows.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendRaster.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"DataBackend for raster objects — DataBackendRaster","text":"data.table::data.table() first n rows.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendRaster.html","id":"method-distinct-","dir":"Reference","previous_headings":"","what":"Method distinct()","title":"DataBackend for raster objects — DataBackendRaster","text":"Returns named list vectors distinct values column specified. na_rm TRUE, missing values removed returned vectors distinct values. Non-existing rows columns silently ignored.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendRaster.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"DataBackend for raster objects — DataBackendRaster","text":"","code":"DataBackendRaster$distinct(rows, cols, na_rm = TRUE)"},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendRaster.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataBackend for raster objects — DataBackendRaster","text":"rows integer() Row indices. Row indices start 1 upper left corner raster, increase left right top bottom. last cell bottom right corner row index equals number cells raster. cols character() Column names. na_rm logical(1) Whether remove NAs .","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendRaster.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"DataBackend for raster objects — DataBackendRaster","text":"Named list() distinct values.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendRaster.html","id":"method-missings-","dir":"Reference","previous_headings":"","what":"Method missings()","title":"DataBackend for raster objects — DataBackendRaster","text":"Returns number missing values per column specified slice data. Non-existing rows columns silently ignored.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendRaster.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"DataBackend for raster objects — DataBackendRaster","text":"","code":"DataBackendRaster$missings(rows, cols)"},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendRaster.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataBackend for raster objects — DataBackendRaster","text":"rows integer() Row indices. Row indices start 1 upper left corner raster, increase left right top bottom. last cell bottom right corner row index equals number cells raster. cols character() Column names.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendRaster.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"DataBackend for raster objects — DataBackendRaster","text":"Total missing values per column (named numeric()).","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendVector.html","id":null,"dir":"Reference","previous_headings":"","what":"DataBackend for vector objects — DataBackendVector","title":"DataBackend for vector objects — DataBackendVector","text":"mlr3::DataBackend vector objects (package sf supported).","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendVector.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"DataBackend for vector objects — DataBackendVector","text":"mlr3::DataBackend -> mlr3::DataBackendDataTable -> DataBackendVector","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendVector.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"DataBackend for vector objects — DataBackendVector","text":"geometry (integer(1)) Returns sf geometry.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendVector.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"DataBackend for vector objects — DataBackendVector","text":"mlr3::DataBackend$format() mlr3::DataBackend$print() mlr3::DataBackendDataTable$data() mlr3::DataBackendDataTable$distinct() mlr3::DataBackendDataTable$head() mlr3::DataBackendDataTable$missings()","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendVector.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"DataBackend for vector objects — DataBackendVector","text":"DataBackendVector$new()","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendVector.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"DataBackend for vector objects — DataBackendVector","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendVector.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DataBackend for vector objects — DataBackendVector","text":"","code":"DataBackendVector$new(data, primary_key)"},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/DataBackendVector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataBackend for vector objects — DataBackendVector","text":"data (sf) raster object. primary_key (character(1) | integer()) Name primary key column, integer vector row ids.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/as_data_backend.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to spatial DataBackend — as_data_backend.stars","title":"Coerce to spatial DataBackend — as_data_backend.stars","text":"Wraps DataBackend around spatial objects. Currently S3 methods alternative ways writing DataBackendRaster$new() DataBackendVector$new(). support coercing backends yet.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/as_data_backend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to spatial DataBackend — as_data_backend.stars","text":"","code":"# S3 method for stars as_data_backend(data, primary_key = NULL, ...)  # S3 method for SpatRaster as_data_backend(data, primary_key = NULL, ...)  # S3 method for RasterBrick as_data_backend(data, primary_key = NULL, ...)  # S3 method for RasterStack as_data_backend(data, primary_key = NULL, ...)  # S3 method for sf as_data_backend(data, primary_key = NULL, keep_rownames = FALSE, ...)"},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/as_data_backend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to spatial DataBackend — as_data_backend.stars","text":"data (terra::SpatRaster) input terra::SpatRaster. primary_key (character(1) | integer()) Name primary key column, integer vector row ids. ... () used. keep_rownames (logical(1) | character(1)) TRUE single string, keeps row names data new column. column named like provided string, defaulting \"..rownames\" keep_rownames == TRUE. Note created column used regular feature task unless manually change column role. Also see data.table::.data.table().","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/as_data_backend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce to spatial DataBackend — as_data_backend.stars","text":"DataBackend.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/as_task_classif.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a Classification Task — as_task_classif.sf","title":"Convert to a Classification Task — as_task_classif.sf","text":"Convert object mlr3::TaskClassif.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/as_task_classif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a Classification Task — as_task_classif.sf","text":"","code":"# S3 method for sf as_task_classif(   x,   target = NULL,   id = deparse(substitute(x)),   positive = NULL,   label = NA_character_,   ... )  # S3 method for SpatRaster as_task_classif(   x,   target = NULL,   id = deparse(substitute(x)),   positive = NULL,   label = NA_character_,   ... )"},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/as_task_classif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a Classification Task — as_task_classif.sf","text":"x () Object convert. target (character(1)) Name target column. id (character(1)) Id new task. Defaults (deparsed substituted) name data argument. positive (character(1)) Level positive class. See TaskClassif. label (character(1)) Label new instance. ... () Additional arguments.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/as_task_classif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to a Classification Task — as_task_classif.sf","text":"TaskClassif.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/as_task_regr.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a Regression Task — as_task_regr.sf","title":"Convert to a Regression Task — as_task_regr.sf","text":"Convert object TaskRegr.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/as_task_regr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a Regression Task — as_task_regr.sf","text":"","code":"# S3 method for sf as_task_regr(   x,   target = NULL,   id = deparse(substitute(x)),   label = NA_character_,   ... )  # S3 method for stars as_task_regr(   x,   target = NULL,   id = deparse(substitute(x)),   label = NA_character_,   ... )  # S3 method for SpatRaster as_task_regr(   x,   target = NULL,   id = deparse(substitute(x)),   label = NA_character_,   ... )  # S3 method for RasterBrick as_task_regr(   x,   target = NULL,   id = deparse(substitute(x)),   label = NA_character_,   ... )  # S3 method for RasterStack as_task_regr(   x,   target = NULL,   id = deparse(substitute(x)),   label = NA_character_,   ... )"},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/as_task_regr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a Regression Task — as_task_regr.sf","text":"x () Object convert. target (character(1)) Name target column. id (character(1)) Id new task. Defaults (deparsed substituted) name data argument. label (character(1)) Label new instance. ... () Additional arguments.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/as_task_regr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to a Regression Task — as_task_regr.sf","text":"TaskRegr.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/block_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Raster Into Chunks — block_size","title":"Split Raster Into Chunks — block_size","text":"Splits raster chunks.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/block_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Raster Into Chunks — block_size","text":"","code":"block_size(raster, chunksize)"},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/block_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Raster Into Chunks — block_size","text":"raster (terra::SpatRaster) Raster split chunks. chunksize (integer(1)) chunksize determines many subparts prediction task split . value can roughly thought megabyte raster file disk. example, prediction 1 GB file carried chunksize = 100L, prediction happen 10 chunks. default chunksize = 1000L might good compromise speed memory usage. find running memory, reduce value.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/factor_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor Layer Generator — factor_layer","title":"Factor Layer Generator — factor_layer","text":"Generates factor layer passed generate_stack().","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/factor_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor Layer Generator — factor_layer","text":"","code":"factor_layer(id, levels, in_memory = FALSE)"},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/factor_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor Layer Generator — factor_layer","text":"id (character(1)) Layer id. levels (character()) Factor levels. in_memory (logical(1)) FALSE (default), layer written disk.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/factor_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor Layer Generator — factor_layer","text":"Named list()","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/generate_stack.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Raster Stack — generate_stack","title":"Generate Raster Stack — generate_stack","text":"Generates raster stack.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/generate_stack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Raster Stack — generate_stack","text":"","code":"generate_stack(   layers,   layer_size = NULL,   dimension = NULL,   multi_layer_file = FALSE )"},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/generate_stack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Raster Stack — generate_stack","text":"layers (List numeric_layer() factor_layer()) List layers. layer_size (numeric(1)) Size single layer megabytes. dimension (integer(1)) Dimension squared layers. multi_layer_file (logical(1)) TRUE, raster written disk single multi-layer file. Overwrites ìn_memory argument numeric_layer() factor_layer(). layer_size dimension mutually exclusive.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/generate_stack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Raster Stack — generate_stack","text":"terra::SpatRaster","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/leipzig.html","id":null,"dir":"Reference","previous_headings":"","what":"Leipzig Land Cover Task — leipzig","title":"Leipzig Land Cover Task — leipzig","text":"Point survey land cover Leipzig. Includes Sentinel-2 spectral bands NDVI.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/leipzig.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Leipzig Land Cover Task — leipzig","text":"Copernicus Sentinel Data (2021). Retrieved Copernicus Open Access Hub processed European Space Agency.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/leipzig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Leipzig Land Cover Task — leipzig","text":"","code":"if(requireNamespace(\"sf\")) { library(sf) data(\"leipzig\", package = \"mlr3spatial\") print(leipzig) } #> Loading required namespace: sf #> Linking to GEOS 3.8.0, GDAL 3.0.4, PROJ 6.3.1; sf_use_s2() is TRUE #> Simple feature collection with 97 features and 9 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 731930.5 ymin: 5692136 xmax: 733220.3 ymax: 5693968 #> Projected CRS: WGS 84 / UTM zone 32N #> # A tibble: 97 × 10 #>      b02   b03   b04   b06   b07   b08   b11    ndvi land_cover #>  * <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl> <chr>      #>  1   903   772   426  2998  4240  4029  1816  0.809  forest     #>  2  1270  1256  1081  1998  2493  2957  2073  0.465  urban      #>  3  1033   996   777  2117  2748  2799  1595  0.565  urban      #>  4   962   773   500   465   505   396   153 -0.116  water      #>  5  1576  1527  1626  1715  1745  1768  1980  0.0418 urban      #>  6  1125  1185   920  3058  3818  3758  2682  0.607  pasture    #>  7   880   746   424  2502  3500  3397  1469  0.778  forest     #>  8  1332  1251  1385  1663  1799  1640  1910  0.0843 urban      #>  9   940   741   475   452   515   400   139 -0.0857 water      #> 10   902   802   454  2764  3821  3666  1567  0.780  forest     #> # … with 87 more rows, and 1 more variable: geom <POINT [m]>"},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/mask_stack.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Points in Raster Stack — mask_stack","title":"Sample Points in Raster Stack — mask_stack","text":"Masks stack circular area interest.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/mask_stack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Points in Raster Stack — mask_stack","text":"","code":"mask_stack(stack)"},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/mask_stack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample Points in Raster Stack — mask_stack","text":"stack (terra::SpatRaster) Raster stack. n (integer(1)) Number points.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/mask_stack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample Points in Raster Stack — mask_stack","text":"terra::SpatRaster","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/mlr3spatial-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mlr3spatial: Support for Spatial Objects Within the 'mlr3' Ecosystem — mlr3spatial-package","title":"mlr3spatial: Support for Spatial Objects Within the 'mlr3' Ecosystem — mlr3spatial-package","text":"Extends 'mlr3' ML framework methods spatial objects. Data storage prediction supported packages 'terra', 'raster' 'stars'.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/mlr3spatial-package.html","id":"learn-mlr-","dir":"Reference","previous_headings":"","what":"Learn mlr3","title":"mlr3spatial: Support for Spatial Objects Within the 'mlr3' Ecosystem — mlr3spatial-package","text":"Book mlr3: https://mlr3book.mlr-org.com Use cases examples gallery: https://mlr3gallery.mlr-org.com Cheat Sheets: https://github.com/mlr-org/mlr3cheatsheets","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/mlr3spatial-package.html","id":"mlr-extensions","dir":"Reference","previous_headings":"","what":"mlr3 extensions","title":"mlr3spatial: Support for Spatial Objects Within the 'mlr3' Ecosystem — mlr3spatial-package","text":"Preprocessing machine learning pipelines: mlr3pipelines Analysis benchmark experiments: mlr3benchmark classification regression tasks: mlr3data Connector OpenML: mlr3oml Solid selection good classification regression learners: mlr3learners Even learners: https://github.com/mlr-org/mlr3extralearners Tuning hyperparameters: mlr3tuning Hyperband tuner: mlr3hyperband Visualizations many mlr3 objects: mlr3viz Survival analysis probabilistic regression: mlr3proba Cluster analysis: mlr3cluster Feature selection filters: mlr3filters Feature selection wrappers: mlr3fselect Interface real (--memory) data bases: mlr3db Performance measures plain functions: mlr3measures","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/mlr3spatial-package.html","id":"suggested-packages","dir":"Reference","previous_headings":"","what":"Suggested packages","title":"mlr3spatial: Support for Spatial Objects Within the 'mlr3' Ecosystem — mlr3spatial-package","text":"Parallelization framework: future Progress bars: progressr Encapsulated evaluation: evaluate, callr (external process)","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/mlr3spatial-package.html","id":"package-options","dir":"Reference","previous_headings":"","what":"Package Options","title":"mlr3spatial: Support for Spatial Objects Within the 'mlr3' Ecosystem — mlr3spatial-package","text":"\"mlr3.debug\": set TRUE, parallelization via future disabled simplify debugging provide concise tracebacks. Note results computed debug mode enabled use different seeding mechanism reproducible. \"mlr3.allow_utf8_names\": set TRUE, checks feature names relaxed, allowing non-ascii characters column names. experimental temporal option pave way text analysis, likely removed future version package. analysis.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/mlr3spatial-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"mlr3spatial: Support for Spatial Objects Within the 'mlr3' Ecosystem — mlr3spatial-package","text":"Becker M, Schratz P (2022). mlr3spatial: Support Spatial Objects Within 'mlr3' Ecosystem. https://mlr3spatial.mlr-org.com, https://github.com/mlr-org/mlr3spatial.","code":""},{"path":[]},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/mlr3spatial-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mlr3spatial: Support for Spatial Objects Within the 'mlr3' Ecosystem — mlr3spatial-package","text":"Maintainer: Marc Becker marcbecker@posteo.de (ORCID) Authors: Patrick Schratz patrick.schratz@gmail.com (ORCID)","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/numeric_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric Layer Generator — numeric_layer","title":"Numeric Layer Generator — numeric_layer","text":"Generates numeric layer passed generate_stack().","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/numeric_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric Layer Generator — numeric_layer","text":"","code":"numeric_layer(id, in_memory = FALSE)"},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/numeric_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric Layer Generator — numeric_layer","text":"id (character(1)) Layer id. in_memory (logical(1)) FALSE (default), layer written disk.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/numeric_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric Layer Generator — numeric_layer","text":"Named list()","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/predict_spatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict on Spatial Objects with mlr3 Learners — predict_spatial","title":"Predict on Spatial Objects with mlr3 Learners — predict_spatial","text":"function allows directly predict mlr3 learners various spatial objects (see section \"Supported Spatial Classes\").","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/predict_spatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict on Spatial Objects with mlr3 Learners — predict_spatial","text":"","code":"predict_spatial(   task,   learner,   chunksize = 200L,   format = \"terra\",   filename = NULL )"},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/predict_spatial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict on Spatial Objects with mlr3 Learners — predict_spatial","text":"task (Task). Task DataBackendRaster DataBackendVector. learner (Learner). Learner trained model. chunksize (integer(1)) chunksize determines many subparts prediction task split . value can roughly thought megabyte raster file disk. example, prediction 1 GB file carried chunksize = 100L, prediction happen 10 chunks. default chunksize = 1000L might good compromise speed memory usage. find running memory, reduce value. format (character(1)) Output class resulting object. Accepted values \"raster\", \"stars\" \"terra\" input DataBackendRaster. Note choosing something else \"terra\", spatial object converted respective format might cause overhead runtime memory allocation. DataBackendVector, output class always sf::sf. filename (character(1)) Path spatial object written .","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/predict_spatial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict on Spatial Objects with mlr3 Learners — predict_spatial","text":"Spatial object class given argument format.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/predict_spatial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict on Spatial Objects with mlr3 Learners — predict_spatial","text":"","code":"library(terra, exclude = \"resample\") #> terra 1.5.21  # fit rpart on training points task_train = tsk(\"leipzig\") learner = lrn(\"classif.rpart\") learner$train(task_train)  # load raster and convert to task stack = rast(system.file(\"extdata\", \"leipzig_raster.tif\", package = \"mlr3spatial\")) task_predict = as_task_classif(stack, id = \"leipzig\")  # predict land cover classes pred = predict_spatial(task_predict, learner, chunksize = 1L)"},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/sample_stack.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Points in Raster Stack — sample_stack","title":"Sample Points in Raster Stack — sample_stack","text":"Samples n points raster stack.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/sample_stack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Points in Raster Stack — sample_stack","text":"","code":"sample_stack(stack, n = 100)"},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/sample_stack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample Points in Raster Stack — sample_stack","text":"stack (terra::SpatRaster) Raster stack. n (integer(1)) Number points.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/sample_stack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample Points in Raster Stack — sample_stack","text":"sf::sf","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/write_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Writes a raster in chunks — write_raster","title":"Writes a raster in chunks — write_raster","text":"Writes square raster disk chunks. Internal helper function.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/write_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Writes a raster in chunks — write_raster","text":"","code":"write_raster(data)"},{"path":"https://mlr3spatial.mlr-org.com/dev/reference/write_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Writes a raster in chunks — write_raster","text":"data [SpatRaster]SpatRaster object.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/news/index.html","id":"mlr3spatial-0129000","dir":"Changelog","previous_headings":"","what":"mlr3spatial 0.1.2.9000","title":"mlr3spatial 0.1.2.9000","text":"feat: data(\"leipzig\") loads sf object land cover Leipzig. feat: GeoTIFF GeoPackage Leipzig extdata folder. feat: Task leipzig land cover target. refactor: DataBackendVector inherits DataBackendDataTable now. BREAKING CHANGE: DataBackendRaster created RasterLayer objects anymore. fix: DataBackendVector initialization failed geometry column different name geometry. fix: spatial_predict() returned unnamed response. feat: Add as_task_regr() as_task_classif() spatial objects. fix: spatial_predict() wrote predictions wrong cell. BREAKING CHANGE: Remove demo_raster(), demo_stack_spatraster(), demo_stack_rasterbrick() demo_rasterbrick() functions. feat: Prediction layer contains NA raster cells NA values one feature layers.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/news/index.html","id":"mlr3spatial-012","dir":"Changelog","previous_headings":"","what":"mlr3spatial 0.1.2","title":"mlr3spatial 0.1.2","text":"CRAN release: 2022-03-06 refactor: stars objects directly converted terra objects now.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/news/index.html","id":"mlr3spatial-011","dir":"Changelog","previous_headings":"","what":"mlr3spatial 0.1.1","title":"mlr3spatial 0.1.1","text":"CRAN release: 2022-01-20 fix: compatibility terra update.","code":""},{"path":"https://mlr3spatial.mlr-org.com/dev/news/index.html","id":"mlr3spatial-010","dir":"Changelog","previous_headings":"","what":"mlr3spatial 0.1.0","title":"mlr3spatial 0.1.0","text":"CRAN release: 2021-11-16 First version mlr3spatial.","code":""}]
